#!/usr/bin/env python3

import unittest


def sum_of_multiples(n: int) -> int:
    """
    Takes an inteter 'n' and returns the sum of all multiples of 7 and 9 less than and including 'n'.
    Assume 'n' >= 0

    eg. sum_of_multiples(30) == 7+9+14+18+21+27+28 == 124
    """

    output = 0
    
    #Your code here

    return output



"""
##########################################################################
                    Testing Interface below
     Can ignore or used as a refrence but shouldn't need to change
##########################################################################
"""
class TestSumOfMultiples(unittest.TestCase):
    def test_example(self):
        self.assertEqual(sum_of_multiples(30), 124)

    def test_zero(self):
        self.assertEqual(sum_of_multiples(0), 0)

    def test_lesson_example(self):
        self.assertEqual(sum_of_multiples(2000), 476814)

    def test_video_example(self):
        self.assertEqual(sum_of_multiples(5001), 2976315)


    def test_first_ten(self):
        self.assertEqual(sum_of_multiples(1), 0)
        self.assertEqual(sum_of_multiples(2), 0)
        self.assertEqual(sum_of_multiples(3), 0)
        self.assertEqual(sum_of_multiples(4), 0)
        self.assertEqual(sum_of_multiples(5), 0)
        self.assertEqual(sum_of_multiples(6), 0)
        self.assertEqual(sum_of_multiples(7), 7)
        self.assertEqual(sum_of_multiples(8), 7)
        self.assertEqual(sum_of_multiples(9), 16)
        self.assertEqual(sum_of_multiples(10), 16)

    def test_double_count(self):
        self.assertEqual(sum_of_multiples(7*9), 504)

    # Only uncomment if your code runs in constant time (no while/for loops)
    # If your code is optimized, this will finish in less then a second.
    #def test_huge(self):
    #    self.assertEqual(sum_of_multiples


if __name__=="__main__":
    unittest.main()
